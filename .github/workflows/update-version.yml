name: Get module properties

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string

    outputs:
      current_version:
        description: 'current_version'
        value: ${{ jobs.get_properties.outputs.current_version }}

      new_version:
        description: 'new_version'
        value: ${{ jobs.get_properties.outputs.new_version }}

      mvn_profile:
        description: 'mvn_profile'
        value: ${{ jobs.get_properties.outputs.mvn_profile }}

      image_tag:
        description: 'image_tag'
        value: ${{ jobs.get_properties.outputs.image_tag }}
      
      helm_image_tag_path:
        description: "image_tag_path"
        value: ${{ jobs.get_properties.outputs.helm_image_tag_path }}

      helm_repository:
        description: 'helm_repository'
        value: ${{ jobs.get_properties.outputs.helm_repository }}

      helm_chart:
        description: 'ecr_repository'
        value: ${{ jobs.get_properties.outputs.helm_chart }}

      helm_values_file:
        description: 'ecr_repository'
        value: ${{ jobs.get_properties.outputs.helm_values_file }}

      helm_namespace:
        description: 'helm_namespace'
        value: ${{ jobs.get_properties.outputs.helm_namespace }}

      helm_release_name:
        description: 'helm_release_name'
        value: ${{ jobs.get_properties.outputs.helm_release_name }}
      
permissions:
  contents: write
  id-token: write


jobs:

  get_properties:
    name: Get properties
    runs-on: self-hosted
    outputs:
        ecr_repository: ${{ steps.get-variables.outputs.ecr_repository }}
        mvn_profile: ${{ steps.get-mvn-profile.outputs.mvn_profile }}
        current_version: ${{ steps.get-version.outputs.current_version }}
        new_version: ${{ steps.get-version.outputs.new_version }}
        image_tag: ${{ steps.get-version.outputs.tag }}

        helm_release_name: ${{ steps.get-helm-variables.outputs.helm_release_name }}
        helm_repository: ${{ steps.get-helm-variables.outputs.helm_repository }}
        helm_image_tag_path: ${{ steps.get-helm-variables.outputs.helm_image_tag_path }}
        helm_chart: ${{ steps.get-helm-variables.outputs.helm_chart }}
        helm_values_file: ${{ steps.get-helm-variables.outputs.helm_values_file }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get Build variables
        id: get-variables
        run: |
          variables_json=$(cat ./.github/workflows/properties.json)
          echo "ecr_repository=$(echo $variables_json | jq -r '.service.sample_mvn.ecr_repository')" >> $GITHUB_OUTPUT
          echo "port=$(echo $variables_json | jq -r '.service.sample_mvn.port')" >> $GITHUB_OUTPUT

      - name: Get Helm variables
        id: get-helm-variables
        if: ${{ inputs.environment != ''}}
        run: |
          variables_json=$(cat ./.github/workflows/properties.json)
          echo "helm_release_name=$(echo $variables_json | jq -r '.service.sample_mvn.helm_release_name')" >> $GITHUB_OUTPUT
          echo "helm_repository=$(echo $variables_json | jq -r '.service.sample_mvn.helm_repository')" >> $GITHUB_OUTPUT
          echo "helm_image_tag_path=$(echo $variables_json | jq -r '.service.sample_mvn.image_tag_path')" >> $GITHUB_OUTPUT
          echo "helm_chart=$(echo $variables_json | jq -r '.service.sample_mvn.helm_chart')" >> $GITHUB_OUTPUT
          echo "helm_values_file=$(echo $variables_json | jq -r ".service.sample_mvn.environment.${{inputs.environment}}.helm_values_file")" >> $GITHUB_OUTPUT
          echo "helm_namespace=$(echo $variables_json | jq -r ".service.sample_mvn.environment.${{inputs.environment}}.helm_namespace")" >> $GITHUB_OUTPUT

      - name: Get maven profile
        id: get-mvn-profile
        if: ${{ inputs.environment != ''}}
        run: |
          if [ "${{ inputs.environment }}" == "stage" ]; then
            echo "mvn_profile=uat" >> $GITHUB_OUTPUT
          elif [ "${{ inputs.environment }}" == "sandbox" ]; then
            echo "mvn_profile=api-sandbox" >> $GITHUB_OUTPUT
          else
            echo "mvn_profile=${{ inputs.environment }}" >> $GITHUB_OUTPUT
          fi

      - name: Get version
        id: get-version
        run: |
          current_version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          major_version=$(mvn build-helper:parse-version help:evaluate -Dexpression=parsedVersion.majorVersion -q -DforceStdout)
          minor_version=$(mvn build-helper:parse-version help:evaluate -Dexpression=parsedVersion.minorVersion -q -DforceStdout)
          next_incremental_version=$(mvn build-helper:parse-version help:evaluate -Dexpression=parsedVersion.nextIncrementalVersion -q -DforceStdout)

          if [[ "$current_version" == *"-SNAPSHOT" ]]; then
            new_version="$major_version.$minor_version.$next_incremental_version-SNAPSHOT"
            tag="${{ inputs.environment }}_v$new_version"
          else
            new_version="$major_version.$minor_version.$next_incremental_version"
            tag="${{ inputs.environment }}_v$new_version"
          fi

          # Debugging outputs
          echo "Extracted Current Version: $current_version"
          echo "Generated New Version: $new_version"
          echo "New Image Tag: $tag"

          # Correctly set GitHub outputs
          echo "current_version=$current_version" | tee -a $GITHUB_OUTPUT
          echo "new_version=$new_version" | tee -a $GITHUB_OUTPUT
          echo "image_tag=$tag" | tee -a $GITHUB_OUTPUT
